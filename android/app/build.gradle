def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

// extract the environment variables passed with the flutter --dart-define flag
// reference: https://itnext.io/flutter-1-17-no-more-flavors-no-more-ios-schemas-command-argument-that-solves-everything-8b145ed4285d
def dartEnvironmentVariables = [
    DEV_ANDROID_GOOGLE_MAPS_API_KEY: '',
    ANDROID_GOOGLE_MAPS_API_KEY: ''
];
if (project.hasProperty('dart-defines')) {
    dartEnvironmentVariables = dartEnvironmentVariables + project.property('dart-defines')
        .split(',')
        .collectEntries { entry ->
            def pair = URLDecoder.decode(entry,"UTF-8" ).split('=')
            [(pair.first()): pair.last()]
        }
}

apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 30

    flavorDimensions "app"

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "com.venni.partner"
        minSdkVersion 20
        targetSdkVersion 30
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }

    productFlavors {
        dev {
            dimension "app"
            resValue "string", "app_name", "Dev Venni Parceiros"
            resValue "string", "bundle_id", "com.venni.partner.dev"
            applicationIdSuffix ".dev"
            versionNameSuffix "-dev"
            resValue "string", "googleMapsApiKey", dartEnvironmentVariables.DEV_ANDROID_GOOGLE_MAPS_API_KEY
        }
        prod {
            dimension "app"
            resValue "string", "app_name", "Venni Parceiros"
            resValue "string", "bundle_id", "com.venni.partner"
            resValue "string", "googleMapsApiKey", dartEnvironmentVariables.ANDROID_GOOGLE_MAPS_API_KEY
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
